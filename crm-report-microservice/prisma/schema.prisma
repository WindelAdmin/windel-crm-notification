generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CheckListImplantacao {
  id                       Int                        @id @default(autoincrement())
  updatedAt                DateTime
  createdAt                DateTime                   @default(now())
  CheckListImplantacaoItem CheckListImplantacaoItem[]
  produtoDetalhes          produtoDetalhes[]
}

model CheckListImplantacaoItem {
  id                     Int                  @id @default(autoincrement())
  titulo                 String
  descricao              String
  createdAt              DateTime             @default(now())
  updatedAt              DateTime
  checklistImplantacaoId Int
  CheckListImplantacao   CheckListImplantacao @relation(fields: [checklistImplantacaoId], references: [id])
}

model PerfilPermissoes {
  id        Int         @id @default(autoincrement())
  nome      String
  createdAt DateTime    @default(now())
  updatedAt DateTime
  usuario   usuario[]
  permissao permissao[] @relation("PerfilPermissao")
}

model TabelasPrecos {
  id                        Int                         @id @default(autoincrement())
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime
  TabelaImplantacaoRelation TabelaImplantacaoRelation[]
  TabelaMensalidadeRelation TabelaMensalidadeRelation[]
  produtoDetalhes           produtoDetalhes[]
}

model TabelaImplantacaoRelation {
  A             Int
  B             Int
  tabelaPrecos  tabelaPrecos  @relation(fields: [A], references: [id], onDelete: Cascade)
  TabelasPrecos TabelasPrecos @relation(fields: [B], references: [id], onDelete: Cascade)

  @@unique([A, B], map: "_TabelaImplantacaoRelation_AB_unique")
  @@index([B], map: "_TabelaImplantacaoRelation_B_index")
  @@map("_TabelaImplantacaoRelation")
}

model TabelaMensalidadeRelation {
  A             Int
  B             Int
  tabelaPrecos  tabelaPrecos  @relation(fields: [A], references: [id], onDelete: Cascade)
  TabelasPrecos TabelasPrecos @relation(fields: [B], references: [id], onDelete: Cascade)

  @@unique([A, B], map: "_TabelaMensalidadeRelation_AB_unique")
  @@index([B], map: "_TabelaMensalidadeRelation_B_index")
  @@map("_TabelaMensalidadeRelation")
}

model atividade {
  id                                          Int                @id @default(autoincrement())
  descricao                                   String
  dataAbertura                                DateTime           @default(now()) @db.Timestamptz(3)
  usuarioId                                   Int?
  interessadoId                               Int?
  clienteId                                   Int?
  unidadeNegocioId                            Int?
  oportunidadeId                              Int?
  categoriaAtividade                          categoriaAtividade
  origemAtividade                             origemAtividade
  createdAt                                   DateTime           @default(now()) @db.Timestamptz(3)
  updatedAt                                   DateTime?
  dataEncerramento                            DateTime?
  dataVencimento                              DateTime?
  usuarioCriadorId                            Int?
  cliente                                     cliente?           @relation(fields: [clienteId], references: [id])
  interessado                                 interessado?       @relation(fields: [interessadoId], references: [id])
  oportunidade                                oportunidade?      @relation(fields: [oportunidadeId], references: [id])
  unidadeNegocio                              unidadeNegocio?    @relation(fields: [unidadeNegocioId], references: [id])
  usuario_atividade_usuarioCriadorIdTousuario usuario?           @relation("atividade_usuarioCriadorIdTousuario", fields: [usuarioCriadorId], references: [id])
  usuario_atividade_usuarioIdTousuario        usuario?           @relation("atividade_usuarioIdTousuario", fields: [usuarioId], references: [id])
}

model auditoria {
  id               Int            @id @default(autoincrement())
  previousData     Json?
  modifiedData     Json
  createdAt        DateTime       @default(now()) @db.Timestamptz(3)
  updatedAt        DateTime?
  unidadeNegocioId Int
  usuarioId        Int
  unidadeNegocio   unidadeNegocio @relation(fields: [unidadeNegocioId], references: [id], onDelete: Cascade)
  usuario          usuario        @relation(fields: [usuarioId], references: [id])
}

model cidade {
  id             Int           @id @unique
  nome           String        @db.VarChar(50)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime
  ufId           Int
  regiaoId       Int?
  microrregiaoId Int?
  microrregiao   microrregiao? @relation(fields: [microrregiaoId], references: [id])
  regiao         regiao?       @relation(fields: [regiaoId], references: [id])
  uf             uf            @relation(fields: [ufId], references: [id])
  endereco       endereco[]
}

model cliente {
  id                       Int                      @id @default(autoincrement())
  cpfCnpj                  String                   @unique @db.VarChar(18)
  inscricaoEstadual        String?                  @db.VarChar(20)
  razaoSocial              String                   @db.VarChar(100)
  nomeFantasia             String?                  @db.VarChar(100)
  observacao               String?
  dataAtivacao             DateTime?
  dataCadastro             DateTime                 @default(now())
  createdAt                DateTime                 @default(now())
  updatedAt                DateTime?
  exclusividadeAte         DateTime?
  dataMigracaoInteressado  DateTime?
  dataUltimaAtualizacao    DateTime?                @default(now())
  dataMudancaProspect      DateTime?
  exclusividade            Boolean
  conveniado               Boolean?
  tipoPessoa               tipoPessoa               @default(JURIDICA)
  tipoCliente              tipoCliente              @default(PROSPECT)
  canalPreferencialContato canalPreferencialContato
  regimeTributario         regimeTributario
  statusCliente            statusCliente
  comoNosConheceu          comoNosConheceu
  tiposAtividade           tipoAtividade[]
  enderecoId               Int?
  unidadeNegocioId         Int
  fornecedorSistemaId      Int?
  indicadorId              Int?
  parceiroId               Int?
  usuarioVendedorId        Int?
  usuarioCriadorId         Int?
  regiaoId                 Int?
  dataAtualizacao          DateTime?
  atividade                atividade[]
  endereco                 endereco?                @relation(fields: [enderecoId], references: [id])
  fornecedorSistema        fornecedorSistema?       @relation(fields: [fornecedorSistemaId], references: [id])
  indicador                indicador?               @relation(fields: [indicadorId], references: [id])
  parceiro                 parceiro?                @relation(fields: [parceiroId], references: [id])
  regiao                   regiao?                  @relation(fields: [regiaoId], references: [id])
  unidadeNegocio           unidadeNegocio           @relation(fields: [unidadeNegocioId], references: [id])
  usuario                  usuario?                 @relation(fields: [usuarioCriadorId], references: [id])
  usuarioVendedor          usuarioVendedor?         @relation(fields: [usuarioVendedorId], references: [id])
  contato                  contato[]
  contrato                 contrato[]
  documento                documento[]
  interessado              interessado[]
  oportunidade             oportunidade[]
  ordemServico             ordemServico[]
  ramoAtividade            ramoAtividade[]          @relation("ClienteToRamoAtividade")
}

model contato {
  id               Int             @id @default(autoincrement())
  nome             String?         @db.VarChar(80)
  contatoPrincipal Boolean?        @default(false)
  unidadeNegocioId Int?
  interessadoId    Int?
  clienteId        Int?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime?
  funcaoContato    FuncaoContato
  cliente          cliente?        @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  interessado      interessado?    @relation(fields: [interessadoId], references: [id], onDelete: Cascade)
  unidadeNegocio   unidadeNegocio? @relation(fields: [unidadeNegocioId], references: [id], onDelete: Cascade)
  email            email[]
  telefone         telefone[]
}

model contrato {
  id               Int            @id @default(autoincrement())
  descricao        String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime?
  clienteId        Int?
  unidadeNegocioId Int
  cliente          cliente?       @relation(fields: [clienteId], references: [id])
  unidadeNegocio   unidadeNegocio @relation(fields: [unidadeNegocioId], references: [id])
  documento        documento[]
}

model documento {
  id         Int       @id @default(autoincrement())
  descricao  String
  url        String
  clienteId  Int?
  contratoId Int?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime?
  cliente    cliente?  @relation(fields: [clienteId], references: [id])
  contrato   contrato? @relation(fields: [contratoId], references: [id])
}

model email {
  id        Int       @id @default(autoincrement())
  email     String
  createdAt DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt DateTime?
  tipoEmail tipoEmail
  contatoId Int?
  contato   contato?  @relation(fields: [contatoId], references: [id])
}

model endereco {
  id             Int             @id @default(autoincrement())
  cep            String?         @db.VarChar(9)
  logradouro     String?         @db.VarChar(100)
  numero         String?         @default("S/N") @db.VarChar(8)
  bairro         String?         @db.VarChar(30)
  complemento    String?         @db.VarChar(50)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime
  tipoEndereco   tipoEndereco
  cidadeId       Int
  cliente        cliente[]
  cidade         cidade          @relation(fields: [cidadeId], references: [id])
  interessado    interessado?
  unidadeNegocio unidadeNegocio?
}

model fornecedorSistema {
  id        Int       @id @default(autoincrement())
  nome      String    @db.VarChar(100)
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  urlSite   String?   @db.VarChar(100)
  cliente   cliente[]
}

model indicador {
  id             Int              @id @default(autoincrement())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime?
  tipo           tipoIndicador
  cliente        cliente[]
  interessado    interessado[]
  unidadeNegocio unidadeNegocio[]
}

model interessado {
  id                Int               @id @default(autoincrement())
  cpfCnpj           String?           @db.VarChar(18)
  nomeFantasia      String            @db.VarChar(100)
  observacao        String?
  dataCadastro      DateTime?         @default(now())
  createdAt         DateTime          @default(now())
  updatedAt         DateTime
  tipoPessoa        tipoPessoa        @default(JURIDICA)
  tipoInteressado   tipoInteressado?  @default(PROSPECT)
  statusInteressado statusInteressado @default(NAO_QUALIFICADO)
  tiposAtividade    tipoAtividade[]
  clienteId         Int?
  enderecoId        Int?              @unique
  indicadorId       Int?
  unidadeNegocioId  Int?
  usuarioCriadorId  Int?
  usuarioVendedorId Int?
  comoNosConheceu   comoNosConheceu
  oportunidadeId    Int?
  motivoDescarte    String?
  atividade         atividade[]
  contato           contato[]
  cliente           cliente?          @relation(fields: [clienteId], references: [id])
  endereco          endereco?         @relation(fields: [enderecoId], references: [id])
  indicador         indicador?        @relation(fields: [indicadorId], references: [id])
  oportunidade      oportunidade?     @relation(fields: [oportunidadeId], references: [id])
  unidadeNegocio    unidadeNegocio?   @relation(fields: [unidadeNegocioId], references: [id])
  usuario           usuario?          @relation(fields: [usuarioCriadorId], references: [id])
  usuarioVendedor   usuarioVendedor?  @relation(fields: [usuarioVendedorId], references: [id])
  ramoAtividade     ramoAtividade[]   @relation("InteressadoRamosAtividade")

  @@index([cpfCnpj(sort: Desc)])
}

model microrregiao {
  id                Int              @id @default(autoincrement())
  nome              String           @db.VarChar(50)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime
  regiaoId          Int?
  unidadeNegocioId  Int
  usuarioVendedorId Int?
  cidade            cidade[]
  regiao            regiao?          @relation(fields: [regiaoId], references: [id])
  unidadeNegocio    unidadeNegocio   @relation(fields: [unidadeNegocioId], references: [id])
  usuarioVendedor   usuarioVendedor? @relation(fields: [usuarioVendedorId], references: [id])
}

model modeloContrato {
  id               Int             @id @default(autoincrement())
  descricao        String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime
  unidadeNegocioId Int?
  unidadeNegocio   unidadeNegocio? @relation(fields: [unidadeNegocioId], references: [id])
  produto          produto[]
}

model oportunidade {
  id                 Int                @id @default(autoincrement())
  descricao          String
  dataAbertura       DateTime?
  dataFechamento     DateTime?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime
  clienteId          Int?
  statusOportunidade statusOportunidade
  tipoOportunidade   tipoOportunidade?
  atividade          atividade[]
  interessado        interessado[]
  cliente            cliente?           @relation(fields: [clienteId], references: [id])
  produto            produto[]
}

model ordemServico {
  id        Int      @id @default(autoincrement())
  nome      String
  descricao String
  createdAt DateTime @default(now())
  updatedAt DateTime
  clienteId Int
  cliente   cliente  @relation(fields: [clienteId], references: [id])
}

model parceiro {
  id        Int       @id @default(autoincrement())
  descricao String
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  clienteId Int?
  cliente   cliente[]
}

model permissao {
  id               Int                @id @default(autoincrement())
  nome             String             @unique
  chave            String             @unique
  descricao        String
  status           Boolean?           @default(true)
  createdAt        DateTime           @default(now()) @db.Timestamptz(3)
  updatedAt        DateTime?
  PerfilPermissoes PerfilPermissoes[] @relation("PerfilPermissao")
  usuario          usuario[]          @relation("PermissaoUsuario")
}

model produto {
  id                Int              @id @default(autoincrement())
  descricao         String
  status            Status           @default(ATIVO)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime
  modeloContratoId  Int
  tipoProdutoId     Int
  produtoPaiId      Int?
  codigo            String
  produtoDetalhesId Int?
  oportunidadeId    Int?
  modeloContrato    modeloContrato   @relation(fields: [modeloContratoId], references: [id])
  oportunidade      oportunidade?    @relation(fields: [oportunidadeId], references: [id])
  produtoDetalhes   produtoDetalhes? @relation(fields: [produtoDetalhesId], references: [id])
  produto           produto?         @relation("produtoToproduto", fields: [produtoPaiId], references: [id])
  other_produto     produto[]        @relation("produtoToproduto")
  tipoProduto       tipoProduto      @relation(fields: [tipoProdutoId], references: [id])
}

model produtoDetalhes {
  id                      Int                   @id @default(autoincrement())
  horasMaximasImplantacao Decimal?              @db.Decimal(14, 2)
  horasMinimasImplantacao Decimal?              @db.Decimal(14, 2)
  valorTabelaImplantacao  Decimal?              @db.Decimal(14, 2)
  valorMensalPorUsuario   Decimal?              @db.Decimal(14, 2)
  descontoMaximoPermitido Decimal?              @db.Decimal(5, 2)
  maxParcelasImplantacao  Int?
  tabelasPrecosId         Int?
  checklistImplantacaoId  Int?
  createdAt               DateTime              @default(now())
  updatedAt               DateTime
  produto                 produto[]
  CheckListImplantacao    CheckListImplantacao? @relation(fields: [checklistImplantacaoId], references: [id])
  TabelasPrecos           TabelasPrecos?        @relation(fields: [tabelasPrecosId], references: [id])
}

model ramoAtividade {
  id          String        @id
  descricao   String        @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime?
  cliente     cliente[]     @relation("ClienteToRamoAtividade")
  interessado interessado[] @relation("InteressadoRamosAtividade")
}

model regiao {
  id                Int              @id @default(autoincrement())
  nome              String           @db.VarChar(50)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime
  unidadesNegocioId Int[]
  cidade            cidade[]
  cliente           cliente[]
  microrregiao      microrregiao[]
  unidadeNegocio    unidadeNegocio[] @relation("RegiaoUnidadesNegocio")
}

model tabelaPrecos {
  id                        Int                         @id @default(autoincrement())
  faixa                     Int
  valor                     Decimal                     @db.Decimal(14, 2)
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime
  TabelaImplantacaoRelation TabelaImplantacaoRelation[]
  TabelaMensalidadeRelation TabelaMensalidadeRelation[]
}

model tarefa {
  id               Int          @id @default(autoincrement())
  titulo           String
  descricao        String?
  dataAbertura     DateTime
  dataFechamento   DateTime?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime?
  usuarioCriadorId Int?
  statusTarefa     statusTarefa
  tipoTarefa       TipoTarefa
  dataVencimento   DateTime?
  usuario          usuario?     @relation(fields: [usuarioCriadorId], references: [id])
}

model telefone {
  id           Int          @id @default(autoincrement())
  numero       String       @db.VarChar(15)
  ramal        String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime?
  tipoTelefone tipoTelefone
  contatoId    Int?
  contato      contato?     @relation(fields: [contatoId], references: [id])
}

model tipoProduto {
  id        Int       @id @default(autoincrement())
  descricao String
  createdAt DateTime  @default(now())
  updatedAt DateTime
  produto   produto[]
}

model uf {
  id        Int      @id @default(autoincrement())
  nome      String   @db.VarChar(20)
  sigla     String   @unique @db.VarChar(2)
  createdAt DateTime @default(now())
  updatedAt DateTime
  cidade    cidade[]
}

model unidadeNegocio {
  id                                               Int                @id @default(autoincrement())
  razaoSocial                                      String             @db.VarChar(60)
  nomeFantasia                                     String             @db.VarChar(60)
  faturaImplantacao                                Boolean
  comissaoPercentual                               Decimal            @db.Decimal(14, 2)
  logo                                             String?
  cpfCnpj                                          String             @unique @db.VarChar(14)
  horaInicioManha                                  String
  horaFinalManha                                   String
  horaInicioTarde                                  String
  horaFinalTarde                                   String
  dataAtivacao                                     DateTime?
  dataInativacao                                   DateTime?
  status                                           Status
  createdAt                                        DateTime           @default(now()) @db.Timestamptz(3)
  updatedAt                                        DateTime?
  tipoUnidadeNegocio                               tipoUnidadeNegocio @default(MATRIZ)
  enderecoId                                       Int?               @unique
  indicadorId                                      Int?
  unidadeNegocioMatrizId                           Int?
  regiaoId                                         Int[]
  atividade                                        atividade[]
  auditoria                                        auditoria[]
  cliente                                          cliente[]
  contato                                          contato[]
  contrato                                         contrato[]
  interessado                                      interessado[]
  microrregiao                                     microrregiao[]
  modeloContrato                                   modeloContrato[]
  endereco                                         endereco?          @relation(fields: [enderecoId], references: [id])
  indicador                                        indicador?         @relation(fields: [indicadorId], references: [id])
  unidadeNegocio                                   unidadeNegocio?    @relation("unidadeNegocioTounidadeNegocio", fields: [unidadeNegocioMatrizId], references: [id])
  other_unidadeNegocio                             unidadeNegocio[]   @relation("unidadeNegocioTounidadeNegocio")
  usuario_usuario_unidadeNegocioIdTounidadeNegocio usuario[]          @relation("usuario_unidadeNegocioIdTounidadeNegocio")
  regiao                                           regiao[]           @relation("RegiaoUnidadesNegocio")
  usuario_UnidadeNegocioAccess                     usuario[]          @relation("UnidadeNegocioAccess")
}

model usuario {
  id                                                      Int               @id @default(autoincrement())
  nome                                                    String            @db.VarChar(80)
  email                                                   String            @unique @db.VarChar(60)
  senha                                                   String
  fotoPerfil                                              String?
  horarioInicioAcesso                                     String?
  horarioFinalAcesso                                      String?
  logado                                                  Boolean?          @default(false)
  ativo                                                   Boolean?          @default(true)
  ultimoAcesso                                            DateTime?
  createdAt                                               DateTime          @default(now()) @db.Timestamptz(3)
  updatedAt                                               DateTime?
  usuarioSetor                                            usuarioSetor
  diasAcesso                                              diaSemana[]
  unidadeNegocioId                                        Int?
  perfilPermissoesId                                      Int?
  usuarioVendedorId                                       Int?              @unique
  usuarioCriadorId                                        Int?
  atividade_atividade_usuarioCriadorIdTousuario           atividade[]       @relation("atividade_usuarioCriadorIdTousuario")
  atividade_atividade_usuarioIdTousuario                  atividade[]       @relation("atividade_usuarioIdTousuario")
  auditoria                                               auditoria[]
  cliente                                                 cliente[]
  interessado                                             interessado[]
  tarefa                                                  tarefa[]
  PerfilPermissoes                                        PerfilPermissoes? @relation(fields: [perfilPermissoesId], references: [id])
  unidadeNegocio_usuario_unidadeNegocioIdTounidadeNegocio unidadeNegocio?   @relation("usuario_unidadeNegocioIdTounidadeNegocio", fields: [unidadeNegocioId], references: [id], onDelete: Cascade)
  usuario                                                 usuario?          @relation("usuarioTousuario", fields: [usuarioCriadorId], references: [id])
  other_usuario                                           usuario[]         @relation("usuarioTousuario")
  usuarioVendedor                                         usuarioVendedor?  @relation(fields: [usuarioVendedorId], references: [id])
  permissao                                               permissao[]       @relation("PermissaoUsuario")
  unidadeNegocio_UnidadeNegocioAccess                     unidadeNegocio[]  @relation("UnidadeNegocioAccess")
}

model usuarioVendedor {
  id           Int            @id @default(autoincrement())
  createdAt    DateTime       @default(now()) @db.Timestamptz(3)
  updatedAt    DateTime?
  cliente      cliente[]
  interessado  interessado[]
  microrregiao microrregiao[]
  usuario      usuario?
}

enum FuncaoContato {
  DIRETOR
  GERENTE
  SUPERVISOR
  COMERCIAL
  FINANCEIRO
  TECNICO
  ADMINISTRATIVO
  OUTRO
}

enum Status {
  ATIVO
  INATIVO
}

enum TipoTarefa {
  EMAIL
  VISITA
  REUNIAO
  QUALIFICACAO
}

enum canalPreferencialContato {
  TELEFONE
  EMAIL
  WHATSAPP
}

enum categoriaAtividade {
  VENDA
  ATENDIMENTO
  PROSPECCAO
  REUNIAO
  OUTROS
}

enum comoNosConheceu {
  INDICACAO
  INTERNET
  TELEVISAO
  RADIO
  JORNAL
  REVISTA
  OUTROS
}

enum diaSemana {
  SEGUNDA
  TERCA
  QUARTA
  QUINTA
  SEXTA
  SABADO
  DOMINGO
}

enum origemAtividade {
  SISTEMA
  USUARIO
}

enum regimeTributario {
  SIMPLES_NACIONAL
  SUBLIMITE
  LUCRO_PRESUMIDO
  LUCRO_REAL
  ARBITRADO
}

enum statusCliente {
  ATIVO
  INATIVO
  DESCARTADO
}

enum statusInteressado {
  NAO_QUALIFICADO
  QUALIFICADO
  DESCARTADO
  VINCULADO
}

enum statusOportunidade {
  INICIAL
  INTERESSADO
  DEMONSTRACAO
  NEGOCIACAO
  ACEITE_VERBAL
  FECHAMENTO_POSITIVO
  FECHAMENTO_NEGATIVO
  CANCELAMENTO
}

enum statusTarefa {
  ABERTA
  EM_ANDAMENTO
  CANCELADA
  CONCLUIDA
}

enum tipoAtividade {
  INDUSTRIA
  COMERCIO
  SERVICO
}

enum tipoCliente {
  PROSPECT
  CLIENTE
  PARCEIRO
}

enum tipoEmail {
  PESSOAL
  COMERCIAL
}

enum tipoEndereco {
  COMERCIAL
  RESIDENCIAL
}

enum tipoIndicador {
  CONTADOR
  FUNCIONARIO
}

enum tipoInteressado {
  CLIENTE
  PROSPECT
  INDICACAO
}

enum tipoOportunidade {
  CONTRATO_NOVO
  CONTRATO_REATIVACAO
  VENDA_AMPLIACAO
  ADENDO_AMPLIACAO
  ADENDO_REDUCAO
}

enum tipoPessoa {
  FISICA
  JURIDICA
}

enum tipoTelefone {
  RESIDENCIAL
  CELULAR
}

enum tipoUnidadeNegocio {
  MATRIZ
  FILIAL
  REVENDA
}

enum usuarioSetor {
  FINANCEIRO
  COMERCIAL
  SUPORTE
  DESENVOLVIMENTO
  RECURSOS_HUMANOS
  MASTER
}
